# -*- coding: utf-8 -*-
"""Copy of shuvayan's weather predicting model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1whd-GQG84wUDbOmbUhRIGEp86EPLAt0k
"""

import pandas as pd
global_temp = pd.read_csv("weather_data.csv")

print(global_temp.shape)
print(global_temp.columns)
print(global_temp.info())
print(global_temp.isnull().sum)

def clean_data(df):
  df = df.copy()
  df = df.drop(columns=["LandAverageTemperatureUncertainty", "LandMaxTemperatureUncertainty", "LandMinTemperatureUncertainty", "LandAndOceanAverageTemperatureUncertainty"], axis=1)
  df["dt"] = pd.to_datetime(df["dt"])
  df["month"] = df["dt"].dt.month
  df["year"] = df["dt"].dt.year
  df = df.drop(columns=["dt"], axis=1)
  df = df.dropna()
  df = df.drop(columns = ["month"], axis=1)
  df = df.set_index(["year"])
  return df

global_temp = clean_data(global_temp)
print(global_temp.head())

import seaborn as sns
import matplotlib.pyplot as plt
corrMatrix = global_temp.corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

target = "LandAndOceanAverageTemperature"
y = global_temp[target]
x = global_temp[["LandAverageTemperature", "LandMaxTemperature", "LandMinTemperature"]]

from sklearn.model_selection import train_test_split
xtrain, xval, ytrain, yval = train_test_split(x, y, test_size=0.25, random_state=42)
print(xtrain.shape)
print(xval.shape)
print(ytrain.shape)
print(yval.shape)

from sklearn.metrics import mean_squared_error
ypred = [ytrain.mean()] * len(ytrain)
print("Baseline MAE:", mean_squared_error(ytrain, ypred))

from sklearn.feature_selection import SelectKBest
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

forest = make_pipeline(
    SelectKBest(k="all"),
    StandardScaler(),
    RandomForestRegressor(
        n_estimators=100,
        max_depth=50,
        random_state=77,
        n_jobs=-1
    )
)
forest.fit(xtrain, ytrain)

import numpy as np

ypred = forest.predict(xval)
errors = mean_squared_error(yval, ypred)
print("Test MAE:", errors)

import numpy as np

ypred = forest.predict(xtrain)
errors = mean_squared_error(ypred, ytrain)
print("Train MAE:", errors)